{
  "_args": [
    [
      {
        "raw": "coinbase/gdax-node",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "coinbase/gdax-node",
        "spec": "github:coinbase/gdax-node",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:coinbase/gdax-node.git",
          "sshUrl": "git+ssh://git@github.com/coinbase/gdax-node.git",
          "httpsUrl": "git+https://github.com/coinbase/gdax-node.git",
          "gitUrl": "git://github.com/coinbase/gdax-node.git",
          "shortcut": "github:coinbase/gdax-node",
          "directUrl": "https://raw.githubusercontent.com/coinbase/gdax-node/master/package.json"
        }
      },
      "C:\\Users\\Sario\\Desktop\\Node APP\\GTrader"
    ]
  ],
  "_from": "coinbase/gdax-node",
  "_id": "gdax@0.3.2",
  "_inCache": true,
  "_location": "/gdax",
  "_phantomChildren": {},
  "_requested": {
    "raw": "coinbase/gdax-node",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "coinbase/gdax-node",
    "spec": "github:coinbase/gdax-node",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:coinbase/gdax-node.git",
      "sshUrl": "git+ssh://git@github.com/coinbase/gdax-node.git",
      "httpsUrl": "git+https://github.com/coinbase/gdax-node.git",
      "gitUrl": "git://github.com/coinbase/gdax-node.git",
      "shortcut": "github:coinbase/gdax-node",
      "directUrl": "https://raw.githubusercontent.com/coinbase/gdax-node/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/coinbase/gdax-node.git#221e7e6ab39ee4639fd07d8eb0e9ba282167c5ea",
  "_shasum": "abc2e7259a8817ef3ee6510e3c00e1f48a3bc8be",
  "_shrinkwrap": null,
  "_spec": "coinbase/gdax-node",
  "_where": "C:\\Users\\Sario\\Desktop\\Node APP\\GTrader",
  "author": {
    "name": "Coinbase"
  },
  "bugs": {
    "url": "https://github.com/coinbase/gdax-node/issues"
  },
  "contributors": [
    {
      "name": "Peter Downs",
      "email": "peterldowns@gmail.com",
      "url": "http://peterdowns.com"
    },
    {
      "name": "Maksim Stepanenko",
      "email": "maksimus16@gmail.com",
      "url": "http://maksim.ms"
    },
    {
      "name": "Miha Rebernik",
      "email": "miha@rebernik.info",
      "url": "http://miha.rebernik.info"
    }
  ],
  "dependencies": {
    "async": "1.5.0",
    "bintrees": "1.0.0",
    "lodash.assign": "3.0.0",
    "lodash.foreach": "3.0.0",
    "lodash.partial": "3.0.0",
    "nock": "3.6.0",
    "num": "0.2.1",
    "request": "2.74.0",
    "ws": "1.1.1"
  },
  "description": "Client for the GDAX API",
  "devDependencies": {
    "mocha": "1.20.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "gitHead": "221e7e6ab39ee4639fd07d8eb0e9ba282167c5ea",
  "homepage": "https://github.com/coinbase/gdax-node",
  "keywords": [
    "API",
    "bitcoin",
    "coinbase",
    "exchange",
    "real-time",
    "trading",
    "websockets",
    "gdax",
    "ethereum"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gdax",
  "optionalDependencies": {},
  "readme": "# GDAX [![CircleCI](https://circleci.com/gh/coinbase/gdax-node.svg?style=svg)](https://circleci.com/gh/coinbase/gdax-node) [![npm version](https://badge.fury.io/js/gdax.svg)](https://badge.fury.io/js/gdax)\r\nThe official Node.js library for the [GDAX\r\nAPI](https://docs.gdax.com/) (formerly Coinbase Exchange).\r\n\r\n*Note: this library may be subtly broken or buggy. The code is released under\r\nthe MIT License – please take the following message to heart:*\r\n\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n> SOFTWARE.\r\n*\r\n\r\n## Features\r\n* Easy programmatic trading.\r\n* A customizable, websocket-synced Order Book implementation.\r\n* API clients with convenient methods for every API endpoint.\r\n* Abstracted interfaces – don't worry about HMAC signing or JSON formatting,\r\n  the library does it for you.\r\n* Semantic versioning.\r\n\r\n## Installation\r\n```bash\r\n# From NPM\r\nnpm install gdax\r\n# From Github\r\nnpm install coinbase/gdax-node\r\n```\r\n\r\n## Quick Start\r\n\r\n### The Public API Client\r\nThe GDAX API has both public and private endpoints. If you're only\r\ninterested in the public endpoints, you should use a `PublicClient`.\r\n\r\n```javascript\r\nvar Gdax = require('gdax');\r\nvar publicClient = new Gdax.PublicClient();\r\n```\r\n\r\nAll API methods are callback based. Your callback should accept three arguments:\r\n\r\n```\r\nvar callback = function(err, response, data) {\r\n  // your code here.\r\n};\r\n```\r\n\r\nThis callback will be passed directly to [the underlying `request` library's\r\n`request` method](https://github.com/request/request).  `err` will be either\r\n`null` or an `Error`. `response` will be a generic HTTP response abstraction\r\ncreated by the `request` library. `data` will be the result of JSON-decoding\r\nthe server's response, or `null` if the response was not parseable. You can\r\nlearn about the API responses of each endpoint [by reading our\r\ndocumentation](https://docs.gdax.com/#market-data).\r\n\r\n#### Public API Methods\r\n\r\n* [`getProducts`](https://docs.gdax.com/#get-products)\r\n```javascript\r\npublicClient.getProducts(callback);\r\n```\r\n\r\n* [`getProductOrderBook`](https://docs.gdax.com/#get-product-order-book)\r\n```javascript\r\n// Get the order book at the default level of detail.\r\npublicClient.getProductOrderBook(callback);\r\n// Get the order book at a specific level of detail.\r\npublicClient.getProductOrderBook({'level': 3}, callback);\r\n```\r\n\r\n* [`getProductTicker`](https://docs.gdax.com/#get-product-ticker)\r\n```javascript\r\npublicClient.getProductTicker(callback);\r\n```\r\n\r\n* [`getProductTrades`](https://docs.gdax.com/#get-trades)\r\n```javascript\r\npublicClient.getProductTrades(callback);\r\n// To make paginated requests, include page parameters\r\npublicClient.getProductTrades({'after': 1000}, callback);\r\n```\r\n\r\n* [`getProductTradeStream`](https://docs.gdax.com/#get-trades)\r\nWraps around `getProductTrades`, fetches all trades with IDs `>= tradesFrom` and `<= tradesTo`.\r\nHandles pagination and rate limits.\r\n\r\n```javascript\r\nvar trades = publicClient.getProductTradeStream(8408000, 8409000);\r\n// tradesTo can also be a function\r\nvar trades publicClient.getProductTradeStream(8408000, function(trade) {\r\n    return Date.parse(trade.time) >= 1463068e6\r\n})\r\n```\r\n\r\n* [`getProductHistoricRates`](https://docs.gdax.com/#get-historic-rates)\r\n```javascript\r\npublicClient.getProductHistoricRates(callback);\r\n// To include extra parameters:\r\npublicClient.getProductHistoricRates({'granularity': 3000}, callback);\r\n```\r\n\r\n* [`getProduct24HrStats`](https://docs.gdax.com/#get-24hr-stats)\r\n```javascript\r\npublicClient.getProduct24HrStats(callback);\r\n```\r\n\r\n* [`getCurrencies`](https://docs.gdax.com/#get-currencies)\r\n```javascript\r\npublicClient.getCurrencies(callback);\r\n```\r\n\r\n* [`getTime`](https://docs.gdax.com/#time)\r\n```javascript\r\npublicClient.getTime(callback);\r\n```\r\n\r\n### The Authenticated API Client\r\nThe [private exchange API\r\nendpoints](https://docs.gdax.com/#private) require you to\r\nauthenticate with an API key. You can create a new API key [in your exchange\r\naccount's settings](https://gdax.com/settings). You can also specify the \r\nAPI uri.\r\n\r\n```javascript\r\nvar Gdax = require('gdax');\r\nvar apiURI = 'https://api.gdax.com';\r\nvar sandboxURI = 'https://api-public.sandbox.gdax.com';\r\n\r\n// Defaults to https://api.gdax.com if apiURI omitted\r\nvar authedClient = new Gdax.AuthenticatedClient(\r\n  key, b64secret, passphrase, apiURI);\r\n```\r\n\r\nLike the `PublicClient`, all API methods are callback based. The callback\r\nshould be in the same format:\r\n\r\n```\r\nvar callback = function(err, response, data) {\r\n  // your code here.\r\n};\r\n```\r\n\r\nThe `AuthenticatedClient` inherits all of the API methods defined by the\r\n`PublicClient`, so if you're hitting both public and private API endpoints you\r\nonly need to create a single client.\r\n\r\n#### Private API Methods\r\n\r\n* [`getAccounts`](https://docs.gdax.com/#list-accounts)\r\n```javascript\r\nauthedClient.getAccounts(callback);\r\n```\r\n\r\n* [`getAccount`](https://docs.gdax.com/#get-an-account)\r\n```javascript\r\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\r\nauthedClient.getAccount(accountID, callback);\r\n```\r\n\r\n* [`getAccountHistory`](https://docs.gdax.com/#get-account-history)\r\n```javascript\r\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\r\nauthedClient.getAccountHistory(accountID, callback);\r\n// For pagination, you can include extra page arguments\r\nauthedClient.getAccountHistory(accountID, {'before': 3000}, callback);\r\n```\r\n\r\n* [`getAccountHolds`](https://docs.gdax.com/#get-holds)\r\n```javascript\r\nvar accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\r\nauthedClient.getAccountHolds(accountID, callback);\r\n// For pagination, you can include extra page arguments\r\nauthedClient.getAccountHolds(accountID, {'before': 3000}, callback);\r\n```\r\n\r\n* [`buy`, `sell`](https://docs.gdax.com/#place-a-new-order)\r\n```javascript\r\n// Buy 1 BTC @ 100 USD\r\nvar buyParams = {\r\n  'price': '100.00', // USD\r\n  'size': '1',  // BTC\r\n  'product_id': 'BTC-USD',\r\n};\r\nauthedClient.buy(buyParams, callback);\r\n\r\n// Sell 1 BTC @ 110 USD\r\nvar sellParams = {\r\n  'price': '110.00', // USD\r\n  'size': '1', // BTC\r\n  'product_id': 'BTC-USD',\r\n};\r\nauthedClient.sell(sellParams, callback);\r\n```\r\n\r\n* [`cancelOrder`](https://docs.gdax.com/#cancel-an-order)\r\n```javascript\r\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\r\nauthedClient.cancelOrder(orderID, callback);\r\n```\r\n\r\n* [`cancelOrders`](https://docs.gdax.com/#cancel-all)\r\n```javascript\r\nauthedClient.cancelOrders(callback);\r\n```\r\n\r\n* [`cancelAllOrders`](https://docs.gdax.com/#cancel-all)\r\n```javascript\r\n// `cancelOrders` may require you to make the request multiple times until\r\n// all the orders are deleted.\r\n\r\n// `cancelAllOrders` will handle making these requests for you asyncronously.\r\n// Also you can add a product_id param to only delete orders of that product\r\n\r\n// The response will be the response of the last call and the data will\r\n// have the order ID's of all your deleted orders\r\nauthedClient.cancelAllOrders({product_id: 'BTC-USD'}, callback);\r\n```\r\n\r\n* [`getOrders`](https://docs.gdax.com/#list-open-orders)\r\n```javascript\r\nauthedClient.getOrders(callback);\r\n// For pagination, you can include extra page arguments\r\nauthedClient.getOrders({'after': 3000}, callback);\r\n```\r\n\r\n* [`getOrder`](https://docs.gdax.com/#get-an-order)\r\n```javascript\r\nvar orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\r\nauthedClient.getOrder(orderID, callback);\r\n```\r\n\r\n* [`getFills`](https://docs.gdax.com/#list-fills)\r\n```javascript\r\nauthedClient.getFills(callback);\r\n// For pagination, you can include extra page arguments\r\nauthedClient.getFills({'before': 3000}, callback);\r\n```\r\n\r\n* [`deposit`, `withdraw`](https://docs.gdax.com/#list-fills)\r\n```javascript\r\n// Deposit to your Exchange USD account from your Coinbase USD account.\r\nvar depositParamsUSD = {\r\n  'amount': '100.00', // USD,\r\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\r\n};\r\nauthedClient.deposit(depositParamsUSD, callback);\r\n// Withdraw from your Exchange USD account to your Coinbase USD account.\r\nvar withdrawParamsUSD = {\r\n  'amount': '100.00', // USD,\r\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\r\n};\r\nauthedClient.withdraw(withdrawParamsUSD, callback);\r\n\r\n// Deposit to your Exchange BTC account from your Coinbase BTC account.\r\nvar depositParamsBTC = {\r\n  'amount': '2.0', // BTC,\r\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\r\n};\r\nauthedClient.deposit(depositParamsBTC, callback);\r\n// Withdraw from your Exchange BTC account to your Coinbase BTC account.\r\nvar withdrawParamsBTC = {\r\n  'amount': '2.0', // BTC,\r\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\r\n};\r\nauthedClient.withdraw(withdrawParamsBTC, callback);\r\n```\r\n\r\n* [`getTrailingVolume`](https://docs.gdax.com/#user-account)\r\n```javascript\r\n// Get your 30 day trailing volumes\r\nauthedClient.getTrailingVolume(callback);\r\n```\r\n\r\n### Websocket client\r\nThe `WebsocketClient` allows you to connect and listen to the\r\n[exchange websocket messages](https://docs.gdax.com/#messages).\r\n```javascript\r\nvar Gdax = require('gdax');\r\nvar websocket = new Gdax.WebsocketClient(['BTC-USD', 'ETH-USD']);\r\nwebsocket.on('message', function(data) { console.log(data); });\r\n```\r\nThe following events can be emitted from the `WebsocketClient`:\r\n* `open`\r\n* `message`\r\n* `close`\r\n* `error`\r\n\r\n### Orderbook\r\n`Orderbook` is a data structure that can be used to store a local copy of the orderbook.\r\n```javascript\r\nvar Gdax = require('gdax');\r\nvar orderbook = new Gdax.Orderbook();\r\n```\r\nThe orderbook has the following methods:\r\n* `state(book)`\r\n* `get(orderId)`\r\n* `add(order)`\r\n* `remove(orderId)`\r\n* `match(match)`\r\n* `change(change)`\r\n\r\n### Orderbook Sync\r\n`OrderbookSync` creates a local mirror of the orderbook on GDAX using\r\n`Orderbook` and `WebsocketClient` as described [here](https://docs.gdax.com/#real-time-order-book).\r\n\r\n```javascript\r\nvar Gdax = require('gdax');\r\nvar orderbookSync = new Gdax.OrderbookSync();\r\nconsole.log(orderbookSync.book.state());\r\n```\r\n\r\n## Testing\r\n\r\n```bash\r\nnpm run test\r\n\r\n# test for known vulnerabilities in packages\r\nnpm install -g nsp\r\nnsp check --output summary\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/coinbase/gdax-node.git"
  },
  "scripts": {
    "test": "mocha --ui qunit --bail --reporter list tests/*.js"
  },
  "version": "0.3.2"
}
